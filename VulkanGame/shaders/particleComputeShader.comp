#version 450

struct Particle
{
	vec2 pos;
	vec2 vel;
	vec4 gradientPos;
	vec2 initialPos;
	float lifeTime;
	float currentLifeTime;
};

// Binding 0 : Position storage buffer
layout(std140, binding = 1) buffer Pos 
{
   Particle particles[ ];
};

layout (local_size_x = 256) in;

layout (binding = 0) uniform UBO 
{
	float deltaT;
	float destX;
	float destY;
	float destZ;
	int particleCount;
} ubo;



void main() 
{
    // Current SSBO index
    uint index = gl_GlobalInvocationID.x;
	// Don't try to write beyond particle count
    if (index >= ubo.particleCount) 
		return;	

	particles[index].currentLifeTime -= ubo.deltaT;
	if(particles[index].currentLifeTime > 0.0f){
	if(particles[index].pos.y <0.20)particles[index].pos.x += ubo.deltaT * particles[index].vel.x * ubo.destX* 10.0f;
	else if(particles[index].pos.y <0.15)particles[index].pos.x += ubo.deltaT * particles[index].vel.x * ubo.destX* 10.0f;
	else if(particles[index].pos.y <0.10)particles[index].pos.x += ubo.deltaT * particles[index].vel.x * ubo.destX* 1.0f;
	else particles[index].pos.x += ubo.deltaT * particles[index].vel.x * ubo.destX * 5.5f;
	particles[index].pos.y += ubo.deltaT*particles[index].vel.y * ubo.destY;
    particles[index].gradientPos.x -= 0.0001 * ubo.deltaT;
    particles[index].gradientPos.y += 0.0001 * ubo.deltaT;
    particles[index].gradientPos.zw = vec2(normalize(particles[index].pos))* 1.0f;
	
	}
	else{
	particles[index].pos = particles[index].initialPos;
	particles[index].currentLifeTime = particles[index].lifeTime;
	
	particles[index].gradientPos.y = 0.0f;
	particles[index].gradientPos.x = 0.9f;
	}

    
   
}