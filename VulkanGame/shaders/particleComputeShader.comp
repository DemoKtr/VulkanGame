#version 450

struct Particle
{
	vec4 pos;
	vec4 gradientPos;
	vec4 initialPos;
	

};

// Binding 0 : Position storage buffer
layout(std140, binding = 1) buffer Pos 
{
   Particle particles[ ];
};

layout (local_size_x = 256) in;

layout (binding = 0) uniform UBO 
{
	float deltaT;
	int particleCount;
} ubo;



void main() 
{
    // Current SSBO index
    uint index = gl_GlobalInvocationID.x;
	// Don't try to write beyond particle count
    if (index >= ubo.particleCount) 
		return;	

	particles[index].initialPos.z -= ubo.deltaT;
	if(particles[index].initialPos.z  > 0.0f){
	
	
	particles[index].pos.x += ubo.deltaT * particles[index].pos.z * 1.0f;
	particles[index].pos.y += ubo.deltaT*particles[index].pos.w;
	particles[index].gradientPos.z += particles[index].pos.z * ubo.deltaT * 1.0f;
    particles[index].gradientPos.x -= 0.0001 * ubo.deltaT;
    particles[index].gradientPos.y -= 0.0001 * ubo.deltaT;
    

	
	}
	else{
	particles[index].pos.xy = particles[index].initialPos.xy;
	
	particles[index].initialPos.z  = particles[index].initialPos.w;
	
	particles[index].gradientPos.y = 0.0f;
	particles[index].gradientPos.x = 0.9f;
	particles[index].gradientPos.z = particles[index].gradientPos.w;
	}

    
   
}